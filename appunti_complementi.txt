Complementi di Programmazione (Python)

23/09/24

Linguaggi statici: linguaggio di programmazione in cui i tipi delle variabili sono verificati a tempo di compilazione anzichè a tempo di esecuzione
    - Linguaggi ad alto livello
    - Linguaggi compilati

Linguaggi dinamici: linguaggio di programmazione in cui i tipi delle variabili vengono verificati a tempo di esecuzione anzichè a tempo di compilazione
    - Linguaggi ad alto livello
    - Linguaggio interpretato

Linguaggio compilato: codice sorgente --> COMPILAZIONE --> linguaggio macchina --> ESECUZIONE --> programma eseguibile
Vantaggi: maggiore efficienza e più veloce nella fase di esecuzione
Svantaggi: dipendenza dalla piattaforma del codice binario generato

Linguaggio interpretato: codice sorgente --> ESECUZIONE (INTERPRETE) --> programma eseguibile
Durante la fase di esecuzione l'interprete converte le istruzioni del file sorgente in linguaggio macchina
Vantaggi: sviluppo più veloce, flessibile e cross-platform (dato che sono gli interpreti ad eseguire il codice, esso stesso risulta una piattaforma indipendente)
Svantaggi: velocità di esecuzione ridotta

Linguaggi dinamici 

Caratteristiche linguaggi dinamici
- Può avere una fase di compilazione, il cui il codice sorgente viene tradotto in un formato intermedio indipendente dall'architettura (es. bytecode) 
- Il formato intermendio è interpretato --> linguaggio portabile
- Tipizzazione dinamica --> i tipi di dato possono mutare a runtime

Vantaggi
- Tipizzazione dinamica: non è necessario dichiarare esplicitamente il tipo di una variabile, inoltre può cambiare durante l'esecuzione del programma
- Controllo dei tipi a runtime: i controlli sui tipi e le conversioni vengono effettuati durante l'esecuzione del programma
- Flessibilità: più flessibili e meno rigidi rispetto ai linguaggi con tipizzazione statica
- Maggiore facilità di debug: più facile esaminare il comportamento del programma poichè i tipi vengono verificati a runtime
- Sviluppo più rapido
- Tipicamente sintassi più semplice

Svantaggi:
- Prestazioni inferiori: la verifica dei tipi e l'allocazione della memoria possono comportare un overhead significativo durante l'esecuzione del programma
- Errori a runtime: gli errori di tipo possono emergere solo durante l'esecuzione del programma, il che può essere problematico per alcune applicazioni
- Difficoltà nella manutenzione del codice: la tipizzazione dinamica rende la manutenzione del codice più complessa 
- Maggiore probabilità di bug: maggiore probabilità di errore a causa della mancanza di verifica statica dei tipi

Type Checking
- Statico
    - idenfifica errori a tempo di compilazione
    - previene errori a runtime
    - più performante
- Dinamico
    - più flessibile: costrutti illegali in linguaggi statici (ES. y=5; y="ciao")
    - più rapida prototipazione

Tipizzazione forte
Si ha quando il linguaggio di programmazione impone rigorosamente regole sulla conversione dei tipi di dati e sulla compatibilità dei tipi
- Conversioni esplicite
- Operazioni solo tra tipi compatibili
- Obbligo di dichiarare il tipo delle variabili

Tipizzazione debole 
Il linguaggio può consentire conversioni implicitamente tra tipi di dati e può essere più permissivo nella gestione dei tipi
- Conversioni implicite
- Operazioni permesse tra tipi incongruenti
- Le variabili possono non avere un tipo esplicito

Tipizzazione safe 
Un linguaggio di programmazione è considerato adottare una "tipizzazione safe" dei dati se impedisce che un'operazione di casting implicito causi un crash

Tipizzazione unsafe
Un linguaggio di programmazione è considerato adottare una "tipizzazione unsafe" dei dati se non impedisce che un'operazione di casting implicito causi un crash

PYTHON

Python è un linguaggio di programmazione dinamico ad alto livello, completamente orientato agli oggetti
    - NB: PYTHON E' UN LINGUAGGIO COMPILATO E INTERPRETATO
    - Ogni variabile (cha ha un tipo) è un oggetto

Quando esegui uno script Python, l'interprete Python prima compila il codice sorgente in un formato intermedio chiamato bytecode
Questo bytecode è memorizzato in file con estensione .pyc (che sta per "Python Compiled")
    - Il bytecode è un linguaggio intermedio
    - La compilazione in bytecode avviene automaticamente, e spesso l'utente non se ne accorge
Il bytecode compilato viene quindi eseguito da un interprete, tipicamente la Python Virtual Machine (PVM)

Script di codice Python:

function calcola(a,b,c) => return (a+b)*c

e1 = calcola(1,2,3)
e2 = calcola([1,2,3],[4,5,6],2)
e3 = calcola('mele ', 'e arance', 3)

e1 → 9
e2 → [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
e3 → 'mele e arance mele e arance mele e arance'

26/09/24

python3 filename --> esegue il file python specificato
python3 -c 'statement' --> permette di lanciare un comando da linea di comando
    python3 -c 'print("ciao " * 2)'

Python
- Linguaggio ad ALTO LIVELLO --> più vicino all'utente (comprensione più immediata)
- Linguaggio DINAMICO --> tipi delle variabili verificati sa tempo di esecuzione
- Linguaggio interpretato
    - Modello a compilatore + interprete
    - Modello a Bytecode
    - Portabile
    - Macchina Virtuale Python (PVM)

Tutti i tipi sono classi
Tipi Built in
    - Numerics: valori numerici (int, float, complex)
    - Sequence: sequenze di oggetti (str, list, tuple)
    - Set: insiemi (set, frozenset)
    - Dict: dizionari di coppie key:value

Numerics
    - Numeri interi
        lunghezza arbitraria (no limiti)
    - Numeri float
        precisione dipendente dall'architettura
        separatore parte intera/decimale "."
    - Numeri complessi
        [Numero reale +] numero reale con suffisso j
        z = 10 + 20j; z = -4j
        z.real: parte reale
        z.imag: parte immaginaria
    - Booleani
        considerati sottotipo degli interi

Numerics - operazioni possibili
- Operazioni aritmetiche standard: +, -, *, /
- Divisione: /
- Divisione intera: //
- Resto divisione tra interi: %
- Valore assoluto: abs()
- Numero complesso coniugato: conjugate()
- Elevamento a potenza: pow(), **
- Arrotondamento: math.trunc(), math.floor(), math.ceil(), round()

Tipi sequenze e stringhe
- Stringhe
    racchiuse tra apici '' o ""
    possibilità di usare i caratteri speciali es. \n \t \\
- Liste
    elementi di qualsiasi tipo (anche non coerenti) racchiusi tra []
- Tuple
    elementi di qualsiasi tipo (anche non coerenti) racchiusi tra ()
    immutabili (a differenza delle liste)

Tipi sequenze e stringhe - Operazioni
- Accesso
    accesso ad un elemento (per indice) -> a[1]
    accesso a sottoliste/sottostringhe -> a[1:3]
    accesso partendo dal fondo -> a[-1]
- Concatenazione
    'a' + 'b' = 'ab'
    [1,2] + [3,4] = [1,2,3,4]
- Ripetizione
    'a' * 4 = 'aaaa'
    [1] * 4 = [1,1,1,1]
- Lunghezza della sequenza/lista 
    len(a) = 4

Tipi stringhe - Operazioni
- s.lower(), s.upper(): ritornano una copia della stringa s con lettere minuscole, maiuscole
- s.count(substr): ritorna il numero di occorrenze della sottostringa substr in s
- s.find(substr): ritorna l'indice della prima occorrenza della sottostringa substr in s
- s.replace(sub1,sub2): rimpiazza le occorrenze della sottostringa sub1 con sub2 in s -→ ritorna la stringa modificata. La stringa di partenza rimane inalterata
IN PYTHON LE STRINGHE SONO IMMUTABILI
- Join: concatena diversi elementi aggiungendo un separatore
    ';'.join([1,2,3]) = "1;2;3"
- Split: divide una stringa in elementi considerando un separatore
    '1+2+3+4+5'.split('+') = ['1', '2', '3', '4', '5']

Tipi liste - Operazioni
- lista.append(oggetto): appende l'oggetto in fondo alla lista
- lista.insert(indice, oggetto): inserisce l'oggetto nella posizione indicata dall'indice
- lista.pop(indice): estrae l'oggetto in posizione indice dalla lista
- lista.pop(): estrae l'ultimo elemento della lista
- lista.sort(): ordina gli oggetti contenuti - modifica lista in-place!
- sorted(lista): non modifica la lista originale
- len(lista): ritorna il numero di elementi contenuti in una lista
- Operatore in: ricerca elemento in una lista
    6 in lista -→ True

Tipi liste - Operazioni Rimozione
- lista.pop(ind1): rimuove l'elemento di indice ind1 e lo ritorna
- lista.remove(elem1): rimuove l'elemento elem1 (matching) senza ritornarlo
- del lista[ind1]: statement che rimuove l'elemento di indice ind1 – opera anche sui range!

Tipi liste - Operazioni Slicing
wt = [1,2,3,4,5]
- Base: 
    wt_slice = wt[1:3] --> [2,3]
    notazione [start:stop]
- Con incremento
    wt_slice = wt[1:5:2] --> [2,4]

Tipi liste - Copie
Se si usa = si copia il riferimento
    a = [1,2,3]; b = a; b[0] = 2; -> b è [2,2,3] a è [2,2,3]
E' STATA MODIFICATA ANCHE A!

Per copiare bisogna usare lo slicing
    a = [1,2,3]; b = a[:]; b[0] = 2; -> b è [2,2,3] a è [1,2,3]
B ORA E' UNA LISTA DIVERSA E OPERARE SU DI ESSA NON MODIFICA A!

Tipi Tuple
Le tuple sono immutabili (come le stringhe)
Si possono usare tutti gli operatori delle liste tranne quelli di modifica!
    tup1 = ('one', 'two', 12, 25)

Tipi Set
Il set, in Python, è un insieme non ordinato di oggetti non replicati:
- Non ordinato -> Non posso accedere tramite indice
- Non replicati -> Lo stesso oggetto sarà presente al massimo una volta
Creato con la funzione set() o {elem, elem}.
a = set() # insieme vuoto
b = set([1,2,3,4]) # insieme creato da una lista
c = {1,2} # insieme con al suo interno gli interi 1 e 2

Tipi Set - Operazioni
- Cardinalità del set S: len(S)
- Appartenenza all'insieme: x in S, x not in S
- Disgiunzione: S1.isdisjoint(S2)
- Unione: S1.union(S2) (simbolo |)
- Intersezione: S1.intersection(S2) (simbolo &)
- Differenza: S1.difference(S2) (simbolo -)

Tipi Dictionary
Il Dictionary, in Python, è un associazione chiave-valore di più elementi:
- simili alle HashMap in Java
Creato con {} o dict()
a = {} # dictionary vuoto
a = dict() # dictionary vuoto
b = {'chiave': valore, 'chiave2': valore2} # dizionario con due coppie chiave-valore
b = {1: 'Rosso', 2: 'Giallo', 3: 'Verde'} # esempio

Il Dictionary, in Python, è un associazione chiave-valore di più elementi:
- Valori: possono essere qualsiasi oggetto
    interi
    stringhe
    ecc…
- Chiavi: SOLO OGGETTI IMMUTABILI
    Numerics
    Stringhe
    Tuple
- LE CHIAVI SONO UNICHE NEL DIZIONARIO

Accesso ai valori:
- Si accede usando la chiave con la notazione [chiave]
a = {'uno': 1, 'due': 2}
a['uno'] -> 1
- Si possono anche modificare/aggiungere gli elementi in questo modo
a['uno'] = 'one' -> {'uno': 'one', 'due': 2}
a['tre'] = 3 -> {'uno': 'one', 'due': 2, 'tre': 3}

Tipi Dictionary - Operazioni
Metodi:
- .keys(): restituisce una lista con tutte le chiavi contenute nel dictionary
- .values(): restituisce una lista con tutti i valori contenuti nel dictionary
- .items(): restituisce una lista di tuple (chiave, valore)

Eliminare una chiave (e il valore):
- del a[chiave] : elimina la chiave e il valore dal dizionario
- .pop(chiave): elimina e restituisce il valore --> alternativa al comando sopra

Controllo presenza chiave:
- operatore in: 'uno' in a -> True se la chiave 'uno' è presente in a
- .has_key(chiave): True se la chiave è presente nel dizionario --> alternativa al comando sopra

Blocco di codice
In Python un blocco di codice è caratterizzato da:
    - inizia con : (seguito dal ritorno a capo)
    - è indentato dall'inizio alla fine
        la fine dell'indentazione indica la fine del blocco

Esempio:
while b < 0:
    b = b + 1 # dentro al ciclo
    b = b + 2 # dentro al ciclo
b = 0 # fuori dal ciclo

Statement ;
In Python non si usa ; per indicare la fine di un'istruzione
La fine di un'istruzione viene identificata dal ritorno a capo
    b = 0
    b = b + 1
Si può usare per mettere più istruzioni sulla stessa riga
    b=0; b=b+1

Statement ,
In Python è possibile utilizzare , per assegnamenti multipli
    b, a = 1, 2
a -> 2
b -> 1

Moduli e import
In Python è possibile importare moduli esterni (librerie) per poterle utilizzare all'interno del proprio codice
    import pandas
    a = pandas.DataFrame()

    import pandas as pd --> è possibile rinominare il modulo
    a = pd.DataFrame()

    from pandas import DataFrame --> è possibile importare solo la funzione specifica senza inserire il riferimento al modulo
    a = DataFrame()

    from pandas import * --> importa tutte le funzioni del modulo senza inserire il riferimento al modulo
    a = DataFrame() 

Commenti
In Python si commenta riga per riga utilizzando il #
Non vi è il commento per blocchi

Costrutti base

- Costrutti condizionali
    if condizione1:
        codice
    elif condizione2:
        codice
    else:
        codice

- Ciclo while
    while b < 10:
        b = b + 1

    while b < 10:
        b = b + 1
    else: --> quando esce viene eseguito l'else
        b = 100

- Ciclo for
    for a in elenco:
        print(a)

    for a in elenco:
        print(a)
    else: --> quando esce viene eseguito l'else
        print('vuoto')

Comandi di salto
- Comando break:
    Interrompe un ciclo for/while
- Comando continue:
    Salta all'iterazione for/while successiva
- Clausola else:
    Può essere inserita alla fine di un blocco relativo ad un ciclo
    Viene eseguita (una volta sola) se un ciclo termina le sue iterazioni o quando la condizione del ciclo è valutata False
    Non viene eseguita in caso di break

Comportamenti ciclo for
Il ciclo for può iterare su qualsiasi elenco di oggetti: stringhe, tuple, liste ecc..
Tipico uso (come in altri linguaggi) iterare su interi ordinati (for i=0; i<10; i++)
    Si usa la funzione range()
        for i in range(10):
            print(i)

range(inizio, fine, intervallo)
    range(0,10,2) --> 0,2,4,6,8
range(inizio, fine)
    range(0,5) --> 0,1,2,3,4
range(fine)
    range(5) --> 0,1,2,3,4

- Ciclo for su liste
    a = ['a', 'b']
    for i in a
        print(i)
Risultato:
a
b

- Ciclo for su stringhe
    a = 'cd'
    for i in a:
        print(i)
Risultato:
c
d

- Ciclo for su tuple
    a = ('a', 'b')
    for i in a:
        print(i)
Risultato:
a
b

- Ciclo for su set: ad ogni iterazione vi è il riferimento ad un elemento dell'insieme
    a = set(['a', 'b'])
    for i in a:
        print(i)
Risultato: --> non è garantito l'ordine
b
a

- Ciclo for su dictionary: ad ogni iterazione vi è il riferimento ad una chiave dell'insieme
    a = {'k1':1, 'k2':2}
    for i in a:
        print(i)
Risultato: --> non è garantito l'ordine
k1
k2

- Ciclo for con funzione enumerate()
La funzione enumerate enumera la sequenza su cui si itera
Ritorna una tupla (indice, oggetto)
    a = 'abc'
    for i in enumerate(a):
        print(i)
    for i,o in enumerate(a):
        print(i)
Risultato 1:
(0,'a')
(1,'b')
(2,'c')
Risultato 2:
0
1
2

30/09/24

Formattare le stringhe
    var = 10
    str_dinamica = f'la variabile ha valore: {var}'
    str_dinamica --> la variabile ha valore: 10

Leggere da stdin
    res = input('inserisci qualcosa: ')
    terminale mostra -> inserisci qualcosa:
    utente inserisce 'ciao'
    res = 'ciao'

Esercizi 1-7 Python Tipi e Costrutti Base

03/10/24

Funzioni - Definizione
Si definiscono con la parola chiave def
La funzione è un blocco di codice (quindi indentato)

def funzione(arg1, arg2): # non si specificano i tipi dei parametri e il valore di ritorno della funzione
    print(arg1)
    print(arg2)
    return 1

Esempio:

def fib(n):
    a, b = 0, 1
    print(a)
    for i in range(n):
        print(b)
        a, b = b, a + b

Funzioni - Argomenti opzionali
E' possibile definire funzioni con parametri opzionali che assumono un valore di default se non passati durante l'invocazione

def funzione(arg1, arg2=0):
    print(arg1)
    print(arg2)
    return 1

Funzioni - Passaggio di argomenti
a = funzione(0,1) --> notazione posizionale (positional argument)
a = funzione(arg2=3, arg1=1) --> è possibile specificare a quale parametro ci si riferisce (keyword argument)
a = funzione(3, arg2=1) --> prima i positional poi i keyword argument
a = [1,2,3,4,5] funzione(*a) --> equivale a funzione(1,2,3,4,5), modo per passare ogni elemento come positional argument
a = {a:1, b:2, c:3} funzione(**a) --> equivale a funzione(a=1,b=2,c=3), modo per passare ogni elemento come keyword argument

Funzioni - Parametri formali con * e **
Gli operatori * e ** possono anche essere utilizzati nella definizione della funzione
    def funzione(*args, **kwargs):
In questo caso tutti i parametri posizionali passati alla funzione vengono condensati nella tupla args
Tutti i keyword arguments vengono condensati in un dizionario kwargs

La funzione può comunque avere parametri espliciti
    def funzione(arg1, arg2, *args, **kwargs):

Funzioni - Ricorsione
Come in altri linguaggi, in Python è possibile scrivere una funzione che chiama se stessa
Remainder:
- CONDIZIONE DI STOP!

Esempio:
def fib(n):
    if (n == 0):
        print(0)
        return 0,1
    a, b = fib(n-1)
    print(a+b)

Programmazione di ordine superiore
Si definisce un linguaggio come di ordine superiore se consente di utilizzare funzioni come valori
Le funzioni possono essere passate ad altre funzioni
Possono essere ritornate come risultato di altre funzioni

Esempio:
def get_print_help_function(lang):
    def eng_help():
        print('help')
    def ita_help():
        print('aiuto')
    if lang == 'eng':
        return eng_help # il valore di ritorno è una funzione (notare l'assenza di ())
    else:
        return ita_help # il valore di ritorno è una funzione

Esempio:
def print_function_result(func): --> la funzione prende in ingresso una funzione che chiamerà al suo interno
    print(f'il risultato è {func()}') 

Programmazione di ordine superiore - CLOSURE
def print_msg(msg):
    def printer():
        print(msg) --> Concetto di CLOSURE: le funzioni innestate possono accedere alle variabili delle funzioni madri
    return printer

Programmazione di ordine superiore - Lambda
La funzione map()
Essa prende in ingresso una funzione e una sequenza di oggetti
Applica tale funzione a ogni oggetto e ne ritorna il risultato (come lista)

Esempio:
def quad(a)
    return a**2

map(quad, [1,2,3])

Python permette di passare la funzione senza definirla in un altro punto del codice
Viene detta "lambda function" (o anche funzione anonima)
Sintassi: lambda argomenti: valore di ritorno
Può contenere un'unica istruzione che sarà il valore di ritorno (non si mette return)

map(lambda x:x**2, [1,2,3])

Generatori
Abbiamo visto che in Python si può iterare su qualsiasi oggetto che abbia un metodo __iter__ che ritorni un iteratore
Questo implica la costruzione di una classe con tale metodo --> i generatori semplificano questo lavoro

Generatori - Funzioni generatrici
- Le funzioni Generatrici generano ad ogni iterazione l'elemento successivo
- E come se ritornassero una serie di valori invece che un unico risultato
- Si creano attraverso il comando yield seguito dal valore da ritornare
- Quando una funzione contiene il comando yield, essa viene trattata da Python come un Generatore
- Implicitamente viene dotata dei metodo __iter__ e __next__

Esempio: range() fai da te!

def range(stop):
    i = 0
    while i < stop:
        yield i
        i = i + 1

Spiegazione:
1. Inizializzazione (i = 0): La variabile i viene inizializzata a 0
2. Ciclo while: La funzione entra in un ciclo while che continua finché il valore di i è minore di stop
3. yield i: 
    - La parola chiave yield trasforma questa funzione in un generatore
    - Un generatore in Python restituisce un valore temporaneamente, sospende l'esecuzione e permette di riprenderla successivamente
    - In questo caso, la funzione restituisce il valore di i e rimane in attesa fino a quando non viene richiesta la successiva iterazione
4. Incremento di i: Dopo aver restituito il valore corrente di i, la funzione incrementa i di 1 (i = i + 1), per poi tornare alla condizione del ciclo while
5. Terminazione: Quando i raggiunge o supera il valore di stop, il ciclo termina e il generatore smette di produrre valori

Generatori - Espressioni generatrici
I Generatori possono anche essere creati con una sintassi molto stringata
Si parla di espressioni generatrici
Sintassi: (espressione for variabili in sequenza)
Esempio: (x**2 for x in range(10)) --> il generatore ritornerà ad ogni iterazione il quadrato dei numeri da 0 a 9

List comprehension
Una sintassi simile (usando [] invece che ()) può essere usata per generare liste in modo immediato:
a = [x**2 for x in range(10)]
a conterrà una lista dei quadrati da 0 a 9

Scope
1. Built-in: entità sempre disponibili. Es. print, disponibile non appena apriamo la shell
2. Global: entità definite nel codice (non dentro a funzioni o blocchi)
3. Enclosing: entità incapsulate per effetto della closure
4. Local: entità definite dentro il blocco di codice in cui si è

1. Built-in
    print('ciao')
2. Global
    a = 1
3. Enclosing
    def encaps():
        "b" = 2
        def local():
            c = 3 + "b"
4. Local
    def encaps():
        b = 2
        def local():
            "c" = 3 + b

print --> scope built-in
a --> scope globale
b --> scope enclosed
c --> scope locale

Si può forzare l'utilizzo di un'entità dello scope globale con la parola chiave "global"

print('ciao')
"x" = 1
def encaps():
    x = 2
    def local():
        "global" x --> in questo caso x si riferisce al "primo" x
        x = 3
def another():
    x = 0

Scope - argomenti funzioni
def fun(x): 
    print(x) --> 5
    x = 'ciao' --> viene modificata la x locale (passaggio per valore)
    print(x) --> 'ciao'

x = 5
fun(x)
print(x) --> 5

def fun(x):
    print(x) --> [1, 2]
    x.append(3)
    print(x) --> [1, 2, 3]

x = [1,2]
fun(x) --> la lista è passata sempre per riferimento
print(x) --> [1, 2, 3]

Gestione delle eccezioni
Le eccezioni possono essere sollevate in due modi:
    1. Automaticamente: queste eccezioni si verificano in seguito a anomalie a runtime causate da istruzioni (ad esempio, divisione per zero)
    2. Manualmente: i programmatori possono sollevare manualmente eccezioni utilizzando istruzioni come "throw" o "raise"
In caso di eccezione, viene eseguito del codice di gestione
Se non è presente un gestore specifico, verrà utilizzato un gestore predefinito che stamperà lo stack delle chiamate ed uscirà dal programma

Esempio: 
try:
    codice --> viene eseguito 
except Classe_eccezione as identificativo:
    codice --> viene eseguito se e solo se viene sollevata un'eccezione del tipo Classe_eccezione
except Altraclasse_eccezione as identificativo:
    codice --> viene eseguito se e solo se viene sollevata un'eccezione del tipo Altraclasse_eccezione
except: 
    codice --> viene eseguito se e solo se viene sollevata un'eccezione non catturata esplicitamente prima
else:
    codice --> viene eseguito se e solo se non venga sollevata nessuna eccezione nel blocco try
finally:
    codice --> viene eseguito sempre, indipendentemente dal fatto che un'eccezione sia stata sollevata o meno

All'interno di una funzione (o blocco) si sollevano le eccezioni con il comando raise
    raise NameException(arg1,arg2)

Decoratori
Un Decoratore è una funzione che prende come parametro un'altra funzione aggiungendo delle funzionalità e restituisce un'altra funzione
senza alterare il codice sorgente della funzione passata come parametro
Si usano i decoratori per aggiungere funzionalità ad una funzione

Esempio:

def funzione_decoratore(funzione_parametro):
    def wrapper():
        # wrapper significa 'incarto, confezione'
        print("... codice da eseguire prima di 'funzione parametro' ...")
        funzione_parametro()
        print("... codice da eseguire dopo di 'funzione parametro' ...")
    return wrapper

@funzione_decoratore
def mia_funzione():
    print('Hello World!')

mia_funzione()

Esempio: misurare il tempo di esecuzione di una funzione

import time    # Importa il modulo time per gestire il tempo
import random  # Importa il modulo random per generare numeri casuali

def func(x):
    # La funzione mette in pausa l'esecuzione per un tempo casuale, che varia tra 0 e 'x' secondi
    time.sleep(random.random()*x) # random.random() restituisce un numero casuale tra 0 e 1, che viene moltiplicato per 'x'

start = time.time() # Memorizza il tempo corrente all'inizio (prima di eseguire la funzione)
func(5)
end = time.time() # Memorizza il tempo corrente alla fine (dopo aver eseguito la funzione)
print ('ci ha messo ', end - start, ' secondi')

Funzione per misurare il tempo

import time  # Importa il modulo time per misurare il tempo

def time_function(function): # Funzione che calcola il tempo di esecuzione della funzione passata come parametro
    def new_function(*args, **kwargs): # Il wrapper: estende o personalizza il comportamento di una funzione esistente
        start = time.time() # Misura il tempo di inizio
        value = function(*args, **kwargs) # Esegue la funzione passata con gli argomenti ricevuti, e memorizza il valore di ritorno in value
        end = time.time() # Misura il tempo di fine
        print('ci ha messo: ', end - start, ' secondi') 
        return value # Ritorna il valore della funzione originale
    return new_function # Ritorna il wrapper

La si applica ad altre funzioni con la sintassi @
@time_function 
def func4(x,y,z)
    time.sleep(random.random() * x + (y-z))

Esempio: 
def d_f(f):
    def function(*args, **kwargs):
        print('Ciao!')
        return f(*args, **kwargs)
    return function

# @d_f
def pippo(x, y, z):
    print(x)
    print(y)
    print(z)

d_f(pippo)(1, 2, 3)
pippo(1,2,3)

10/10/24

Esercizi funzione1 - funzione9

14/10/24

Reminder OOP

Classe -> definisce variabili e metodi contenuti
Oggetto -> istanza di una classe
Astrazione -> non si guardano i dettagli implementativi (per l'utilizzatore)
Incapsulamento -> protezione degli attributi interni
Ereditarietà -> si ereditano comportamente (meno codice)
Polimorfismo -> comportamento adattabile

Classi - Definizione

class nome_classe:
    ...metodi, attributi

Esempio:
class esempio:
    i = 0 # attributo di classe

    def metodo1(self, arg1, arg2) # metodo
        ...

- La classe è essa stessa un oggetto (in Python tutto è un oggetto); 
    da non confondere con gli oggetti istanziati dalla classe
- Utilizzando l'oggetto classe è possibile istanziare oggetti di quella classe:
    variabile = NomeClasse()
- Accedere ai contenuti della classe (attributi di classe e metodi):
    NomeClasse.nome_elemento

Classi - Attributi di classe
Gli attributi di classe sono attributi che appartengono all'oggetto classe e non agli oggetti istanziati di quella classe
Sono definiti direttamente nel blocco di codice della classe

Esempio:
class esempio:
    i = 0 # attributo 1
    a = 'ciao' # attributo 2

Possono essere acceduti direttamente dall'oggetto classe:
    NomeClasse.i
Ma anche utilizzando gli oggetti istanziati:
    a = NomeClasse()
    a.i

Classi - Metodi
Si definiscono con la parola chiave def e hanno come primo argomento obbligatorio il riferimento all’oggetto stesso
    Tipicamente lo si chiama self, permette di accedere ai metodi/attributi dell'oggetto

Esempio:
classe esempio:
    def metodo1(self, arg1, arg2)
        ...

Classi - chiamata dei metodi
Quando si chiama il metodo su oggetto non si passa il self
Siccome il metodo è chiamato su un oggetto specifico l'interprete è a conoscenza che self sarà riferito a quell'oggetto

Esempio:
i = NomeClasse()
i.metodo1()

Classi - Costruttore
Il costruttore è un metodo speciale che inizializza l'oggetto istanziato
Deve avere come nome __init__

class NomeClasse():
    def __init__(self, arg1, arg2):
        ...

Nel costruttore si inizializzano gli attributi dell'oggetto (non quelli di classe)
Lo si fa attraverso self

class NomeClasse():
    def __init__(self, arg1, arg2):
        self.a = 10

Il costruttore viene chiamato automaticamente quando viene istanziato l'oggetto
    a = NomeClasse()

Classi - Metodi static e class
Una classe può avere metodi che possono essere chiamati sulla classe stessa invece che sull'istanza
    - metodi statici @staticmethod
    - metodi class @classmethod

Metodi statici @staticmethod
class NomeClasse:
    @staticmethod
    def static_method(x):
        print(x)

Metodi class @classmethod
class NomeClasse:
    @classmethod
    def class_method(self, x) # ATTENZIONE: self in questo caso è l'oggetto classe e non l'oggetto istanziato
        print(x)

I metodi statici e class vengono chiamati come altri metodi ma utilizzando l'oggetto class
Questo implica che non vi è un oggetto istanziato e quindi tali metodi potranno accedere solo agli attributi di classe

Classi - Ciclo di Inizializzazione
Quando si istanzia un oggetto
    a = NomeClasse()
l'interprete chiama due metodi:
    - il primo per creare l'oggetto --> è il metodo __new__ (prende in ingresso una classe e restituisce un oggetto di quella classe)
    - il secondo per inizializzarlo --> è il costruttore __init__ (non restituisce nulla in quanto l'oggetto esiste già, self, che viene inizializzato)

Classi - Metodi/attributi privati
In Python i metodi e gli attributi di una classe sono pubblici
Per rendere privata un'entità si agisce sul nome:
    le entità che iniziano con 2 underscore __ e terminano con massimo un underscore _ vengono considerati privati

class Prova:
    def __init__(self):
        self.__priv = 'privato'

Classi - Metodi speciali